{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/dset.js","../lib/deep_set.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for function options\n* @param {Options} options - function options\n* @param {boolean} [options.create] - boolean indicating whether to create a path if the key path does not already exist\n* @param {string} [options.sep] - key path separator\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '/'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'create' ) ) {\n\t\topts.create = options.create;\n\t\tif ( !isBoolean( opts.create ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'create', opts.create ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObjectLike = require( '@stdlib/assert-is-object-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\n\n\n// MAIN //\n\n/**\n* Sets a nested property.\n*\n* @private\n* @param {ObjectLike} obj - input object\n* @param {Array} props - list of properties defining a key path\n* @param {boolean} create - boolean indicating whether to create a path if the key path does not already exist\n* @param {*} val - value to set\n* @returns {boolean} boolean indicating if the property was successfully set\n*/\nfunction deepSet( obj, props, create, val ) {\n\tvar bool;\n\tvar len;\n\tvar v;\n\tvar p;\n\tvar i;\n\n\tlen = props.length;\n\tbool = false;\n\tv = obj;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tp = props[ i ];\n\t\tif ( isObjectLike( v ) ) {\n\t\t\tif ( !hasOwnProp( v, p ) ) {\n\t\t\t\tif ( create ) {\n\t\t\t\t\tv[ p ] = {};\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i === len-1 ) {\n\t\t\t\tif ( isFunction( val ) ) {\n\t\t\t\t\tv[ p ] = val( v[ p ] );\n\t\t\t\t} else {\n\t\t\t\t\tv[ p ] = val;\n\t\t\t\t}\n\t\t\t\tbool = true;\n\t\t\t} else {\n\t\t\t\tv = v[ p ];\n\t\t\t}\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = deepSet;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObjectLike = require( '@stdlib/assert-is-object-like' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isArray = require( '@stdlib/assert-is-array' );\nvar format = require( '@stdlib/string-format' );\nvar copy = require( '@stdlib/utils-copy' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.json' );\nvar dset = require( './dset.js' );\n\n\n// MAIN //\n\n/**\n* Sets a nested property value.\n*\n* @param {ObjectLike} obj - input object\n* @param {(string|Array)} path - key path\n* @param {*} value - value to set\n* @param {Options} [options] - function options\n* @param {boolean} [options.create=false] - boolean indicating whether to create a path if the key path does not already exist\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} second argument must be a string or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {boolean} boolean indicating if the property was successfully set\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.b.c', 'woot' );\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.beep.c', 'boop' );\n* // returns false\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( null, 'a.beep.c', 'boop' );\n* // returns false\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* bool = deepSet( 'bap', 'a.beep.c', 'boop' );\n* // returns false\n*\n* @example\n* var arr = [\n*     { 'a': [ {'x': 5} ] },\n*     { 'a': [ {'x': 10} ] }\n* ];\n* var bool = deepSet( arr, '1.a.0.x', 25 );\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a/b/c', 'beep', {\n*     'sep': '/'\n* });\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.e.c', 'boop', {\n*     'create': true\n* });\n* // returns true\n*/\nfunction deepSet( obj, path, value, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\tif ( !isObjectLike( obj ) ) {\n\t\treturn false;\n\t}\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Key path must be a string or a key array. Value: `%s`.', path ) );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn dset( obj, props, opts.create, value );\n}\n\n\n// EXPORTS //\n\nmodule.exports = deepSet;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isObjectLike = require( '@stdlib/assert-is-object-like' );\nvar format = require( '@stdlib/string-format' );\nvar copy = require( '@stdlib/utils-copy' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.json' );\nvar dset = require( './dset.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable deep set function.\n*\n* @param {(string|Array)} path - key path\n* @param {Options} [options] - function options\n* @param {boolean} [options.create=false] - boolean indicating whether to create a path if the key path does not already exist\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} first argument must be a string or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} deep set function\n*\n* @example\n* var dset = factory( 'a/b/c', {\n*     'create': true,\n*     'sep': '/'\n* });\n*/\nfunction factory( path, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Key path must be a string or a key array. Value: `%s`.', path ) );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn deepSet;\n\n\t/**\n\t* Sets a nested property.\n\t*\n\t* @private\n\t* @param {ObjectLike} obj - input object\n\t* @param {*} value - value to set\n\t* @returns {boolean} boolean indicating if the property was successfully set\n\t*\n\t* @example\n\t* var obj = { 'a': { 'b': { 'c': 'd' } } };\n\t* var bool = dset( obj, 'beep' );\n\t*/\n\tfunction deepSet( obj, value ) {\n\t\tif ( isObjectLike( obj ) ) {\n\t\t\treturn dset( obj, props, opts.create, value );\n\t\t}\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Set a nested property value.\n*\n* @module @stdlib/utils-deep-set\n*\n* @example\n* var deepSet = require( '@stdlib/utils-deep-set' );\n*\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.b.c', 'beep' );\n* // returns true\n*\n* var dset = deepSet.factory( 'a/b/c', {\n*     'create': true,\n*     'sep': '/'\n* });\n*\n* obj = { 'a': { 'b': { 'c': 'd' } } };\n*\n* bool = dset( obj, 'beep' );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar deepSet = require( './deep_set.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( deepSet, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = deepSet;\n"],"names":["isBoolean","require$$0","isPrimitive","isString","require$$1","isObject","require$$2","hasOwnProp","require$$3","format","require$$4","validate_1","opts","options","create","TypeError","sep","isObjectLike","isFunction","dset","obj","props","val","bool","len","v","p","i","length","isArray","copy","validate","require$$5","defaults","require$$6","require$$7","deep_set","path","value","isStr","err","arguments","split","factory_1","deepSet","factory","lib"],"mappings":";;g3BAsBA,IAAIA,EAAYC,EAAuCC,YACnDC,EAAWC,EAAsCF,YACjDG,EAAWC,EACXC,EAAaC,EACbC,EAASC,EA+Cb,IAAAC,EAtBA,SAAmBC,EAAMC,GACxB,OAAMR,EAAUQ,GAGXN,EAAYM,EAAS,YACzBD,EAAKE,OAASD,EAAQC,QAChBd,EAAWY,EAAKE,SACd,IAAIC,UAAWN,EAAQ,+DAAgE,SAAUG,EAAKE,SAG1GP,EAAYM,EAAS,SACzBD,EAAKI,IAAMH,EAAQG,KACbb,EAAUS,EAAKI,MACb,IAAID,UAAWN,EAAQ,8DAA+D,MAAOG,EAAKI,MAGpG,KAdC,IAAID,UAAWN,EAAQ,qEAAsEI,2BC/BlGI,EAAehB,EACfM,EAAaH,EACbc,EAAaZ,EAuDjB,IAAAa,EAxCA,SAAkBC,EAAKC,EAAOP,EAAQQ,GACrC,IAAIC,EACAC,EACAC,EACAC,EACAC,EAKJ,IAHAH,EAAMH,EAAMO,OACZL,GAAO,EACPE,EAAIL,EACEO,EAAI,EAAGA,EAAIH,IAChBE,EAAIL,EAAOM,GACNV,EAAcQ,IAFEE,IAAM,CAG1B,IAAMpB,EAAYkB,EAAGC,GAAM,CAC1B,IAAKZ,EAGJ,MAFAW,EAAGC,GAAM,GAKNC,IAAMH,EAAI,GACTN,EAAYI,GAChBG,EAAGC,GAAMJ,EAAKG,EAAGC,IAEjBD,EAAGC,GAAMJ,EAEVC,GAAO,GAEPE,EAAIA,EAAGC,GAMV,OAAOH,GCnDJN,EAAehB,EACfE,EAAWC,EAAsCF,YACjD2B,EAAUvB,EACVG,EAASD,EACTsB,EAAOpB,EACPqB,EAAWC,EACXC,EAAWC,EACXf,EAAOgB,EA2FX,IAAAC,EA9BA,SAAkBhB,EAAKiB,EAAMC,EAAOzB,GACnC,IAAI0B,EACAlB,EACAT,EACA4B,EACJ,IAAMvB,EAAcG,GACnB,OAAO,EAGR,KADAmB,EAAQpC,EAAUkC,MACFR,EAASQ,GACxB,MAAM,IAAItB,UAAWN,EAAQ,2EAA4E4B,IAG1G,GADAzB,EAAOkB,EAAMG,GACRQ,UAAUb,OAAS,IACvBY,EAAMT,EAAUnB,EAAMC,IAErB,MAAM2B,EAQR,OAJCnB,EADIkB,EACIF,EAAKK,MAAO9B,EAAKI,KAEjBqB,EAEFlB,EAAMC,EAAKC,EAAOT,EAAKE,OAAQwB,IC5FnCnC,EAAWF,EAAsCC,YACjD2B,EAAUzB,EACVa,EAAeX,EACfG,EAASD,EACTsB,EAAOpB,EACPqB,EAAWC,EACXC,EAAWC,EACXf,EAAOgB,EAsEX,IAAAQ,EA/CA,SAAkBN,EAAMxB,GACvB,IAAI0B,EACAlB,EACAT,EACA4B,EAGJ,KADAD,EAAQpC,EAAUkC,MACFR,EAASQ,GACxB,MAAM,IAAItB,UAAWN,EAAQ,2EAA4E4B,IAG1G,GADAzB,EAAOkB,EAAMG,GACRQ,UAAUb,OAAS,IACvBY,EAAMT,EAAUnB,EAAMC,IAErB,MAAM2B,EAQR,OAJCnB,EADIkB,EACIF,EAAKK,MAAO9B,EAAKI,KAEjBqB,EAEFO,EAcP,SAASA,EAASxB,EAAKkB,GACtB,QAAKrB,EAAcG,IACXD,EAAMC,EAAKC,EAAOT,EAAKE,OAAQwB,KC5CzCM,EAAAxC,EACAyC,EAAAvC,EAFAL,EAOA2C,EAAA,UAAAC,GAKA,IAAAC,EAAAF"}