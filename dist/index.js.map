{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/defaults.js", "../lib/dset.js", "../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for function options\n* @param {Options} options - function options\n* @param {boolean} [options.create] - boolean indicating whether to create a path if the key path does not already exist\n* @param {string} [options.sep] - key path separator\n* @returns {(Error|null)} error or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'sep': '/'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'create' ) ) {\n\t\topts.create = options.create;\n\t\tif ( !isBoolean( opts.create ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'create', opts.create ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sep' ) ) {\n\t\topts.sep = options.sep;\n\t\tif ( !isString( opts.sep ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'sep', opts.sep ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'create': false,\n\t\t'sep': '.'\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObjectLike = require( '@stdlib/assert-is-object-like' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isFunction = require( '@stdlib/assert-is-function' );\n\n\n// MAIN //\n\n/**\n* Sets a nested property.\n*\n* @private\n* @param {ObjectLike} obj - input object\n* @param {Array} props - list of properties defining a key path\n* @param {boolean} create - boolean indicating whether to create a path if the key path does not already exist\n* @param {*} val - value to set\n* @returns {boolean} boolean indicating if the property was successfully set\n*/\nfunction deepSet( obj, props, create, val ) {\n\tvar bool;\n\tvar len;\n\tvar v;\n\tvar p;\n\tvar i;\n\n\tlen = props.length;\n\tbool = false;\n\tv = obj;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tp = props[ i ];\n\t\tif ( isObjectLike( v ) ) {\n\t\t\tif ( !hasOwnProp( v, p ) ) {\n\t\t\t\tif ( create ) {\n\t\t\t\t\tv[ p ] = {};\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( i === len-1 ) {\n\t\t\t\tif ( isFunction( val ) ) {\n\t\t\t\t\tv[ p ] = val( v[ p ] );\n\t\t\t\t} else {\n\t\t\t\t\tv[ p ] = val;\n\t\t\t\t}\n\t\t\t\tbool = true;\n\t\t\t} else {\n\t\t\t\tv = v[ p ];\n\t\t\t}\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn bool;\n}\n\n\n// EXPORTS //\n\nmodule.exports = deepSet;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObjectLike = require( '@stdlib/assert-is-object-like' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isArray = require( '@stdlib/assert-is-array' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.js' );\nvar dset = require( './dset.js' );\n\n\n// MAIN //\n\n/**\n* Sets a nested property value.\n*\n* @param {ObjectLike} obj - input object\n* @param {(string|Array)} path - key path\n* @param {*} value - value to set\n* @param {Options} [options] - function options\n* @param {boolean} [options.create=false] - boolean indicating whether to create a path if the key path does not already exist\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} second argument must be a string or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {boolean} boolean indicating if the property was successfully set\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.b.c', 'woot' );\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.beep.c', 'boop' );\n* // returns false\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( null, 'a.beep.c', 'boop' );\n* // returns false\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* bool = deepSet( 'bap', 'a.beep.c', 'boop' );\n* // returns false\n*\n* @example\n* var arr = [\n*     { 'a': [ {'x': 5} ] },\n*     { 'a': [ {'x': 10} ] }\n* ];\n* var bool = deepSet( arr, '1.a.0.x', 25 );\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a/b/c', 'beep', {\n*     'sep': '/'\n* });\n* // returns true\n*\n* @example\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.e.c', 'boop', {\n*     'create': true\n* });\n* // returns true\n*/\nfunction deepSet( obj, path, value, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\tif ( !isObjectLike( obj ) ) {\n\t\treturn false;\n\t}\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Key path must be a string or a key array. Value: `%s`.', path ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn dset( obj, props, opts.create, value );\n}\n\n\n// EXPORTS //\n\nmodule.exports = deepSet;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isObjectLike = require( '@stdlib/assert-is-object-like' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.js' );\nvar dset = require( './dset.js' );\n\n\n// MAIN //\n\n/**\n* Creates a reusable deep set function.\n*\n* @param {(string|Array)} path - key path\n* @param {Options} [options] - function options\n* @param {boolean} [options.create=false] - boolean indicating whether to create a path if the key path does not already exist\n* @param {string} [options.sep='.'] - key path separator\n* @throws {TypeError} first argument must be a string or key array\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} deep set function\n*\n* @example\n* var dset = factory( 'a/b/c', {\n*     'create': true,\n*     'sep': '/'\n* });\n*/\nfunction factory( path, options ) {\n\tvar isStr;\n\tvar props;\n\tvar opts;\n\tvar err;\n\n\tisStr = isString( path );\n\tif ( !isStr && !isArray( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Key path must be a string or a key array. Value: `%s`.', path ) );\n\t}\n\topts = defaults();\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( isStr ) {\n\t\tprops = path.split( opts.sep );\n\t} else {\n\t\tprops = path;\n\t}\n\treturn deepSet;\n\n\t/**\n\t* Sets a nested property.\n\t*\n\t* @private\n\t* @param {ObjectLike} obj - input object\n\t* @param {*} value - value to set\n\t* @returns {boolean} boolean indicating if the property was successfully set\n\t*\n\t* @example\n\t* var obj = { 'a': { 'b': { 'c': 'd' } } };\n\t* var bool = dset( obj, 'beep' );\n\t*/\n\tfunction deepSet( obj, value ) {\n\t\tif ( isObjectLike( obj ) ) {\n\t\t\treturn dset( obj, props, opts.create, value );\n\t\t}\n\t\treturn false;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Set a nested property value.\n*\n* @module @stdlib/utils-deep-set\n*\n* @example\n* var deepSet = require( '@stdlib/utils-deep-set' );\n*\n* var obj = { 'a': { 'b': { 'c': 'd' } } };\n* var bool = deepSet( obj, 'a.b.c', 'beep' );\n* // returns true\n*\n* var dset = deepSet.factory( 'a/b/c', {\n*     'create': true,\n*     'sep': '/'\n* });\n*\n* obj = { 'a': { 'b': { 'c': 'd' } } };\n*\n* bool = dset( obj, 'beep' );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isBoolean", "isString", "isObject", "hasOwnProp", "format", "validate", "opts", "options", "require_defaults", "__commonJSMin", "exports", "module", "defaults", "require_dset", "__commonJSMin", "exports", "module", "isObjectLike", "hasOwnProp", "isFunction", "deepSet", "obj", "props", "create", "val", "bool", "len", "v", "p", "i", "require_main", "__commonJSMin", "exports", "module", "isObjectLike", "isString", "isArray", "format", "validate", "defaults", "dset", "deepSet", "obj", "path", "value", "options", "isStr", "props", "opts", "err", "require_factory", "__commonJSMin", "exports", "module", "isString", "isArray", "isObjectLike", "format", "validate", "defaults", "dset", "factory", "path", "options", "isStr", "props", "opts", "err", "deepSet", "obj", "value", "setReadOnly", "main", "factory"]
}
